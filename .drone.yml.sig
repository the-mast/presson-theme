eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgYnVpbGQ6CiAgICBpbWFnZTogdGhlbWFzdC9kb2NrZXItd3AtdGhlbWUtYnVpbGQ6bGF0ZXN0CiAgICBjb21tYW5kczoKICAgICAgLSBucG0gaW5zdGFsbCAtZyBndWxwLWNsaSBib3dlciAmJiBucG0gaW5zdGFsbCAtLXVuc2FmZS1wZXJtCiAgICAgIC0gZ2l0IGNsb25lIC0tZGVwdGg9MSBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzLUNvZGluZy1TdGFuZGFyZHMvV29yZFByZXNzLUNvZGluZy1TdGFuZGFyZHMuZ2l0IHdwY3MKICAgICAgLSBucG0gaW5zdGFsbAogICAgICAtIG5wbSBpbnN0YWxsIC1nIGd1bHAtY2xpCiAgICAgIC0gY2Qgd3BjcyAmJiBjb21wb3NlciBpbnN0YWxsCiAgICAgIC0gZ3VscCBwaHBjcwogICAgICAtIGd1bHAgcGhwY2JmCiAgICAgIC0gZ3VscCBwYWNrYWdlCiAgICAgIC0gY2QgLi4KICAgICAgLSBnaXQgY29uZmlnIHJlbW90ZS5vcmlnaW4udXJsICdodHRwczovLyR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tL3RoZS1tYXN0L3dlYnN0YXJ0ZXJraXQtc3Bpa2UuZ2l0JwogICAgICAtIGdpdCB0YWcgdjAuMC4xLSR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBnaXQgcHVzaCBvcmlnaW4gdjAuMC4xLSR7RFJPTkVfQ09NTUlUX1NIQX0KCiAgZGVwbG95OgogICAgaW1hZ2U6IGRyaWxsc3Rlci9kcm9uZS1yc3luYzpsYXRlc3QKICAgIGhvc3RzOiBbICcke1JFTU9URV9JUF9BRERSRVNTfScgXQogICAga2V5OiAke1JFTU9URV9SU0FfS0VZfQogICAgc291cmNlOiAuL3BhY2thZ2VkLyoKICAgIHRhcmdldDogL3Zhci93d3cvaHRtbC93cC1jb250ZW50L3RoZW1lcy9tYXN0LXRoZW1lCiAgICBkZWxldGU6IHRydWUKICAgIHNjcmlwdDoKICAgICAgICAgIC0gY2QgL3Zhci93d3cvaHRtbC93cC1jb250ZW50L3RoZW1lcy9tYXN0LXRoZW1lCiAgICAgICAgICAtIGZpbmQgLiAhIC1uYW1lICIqLnppcCIgLWV4ZWMgcm0gLXJmIHt9IFw7CiAgICAgICAgICAtIHVuemlwICJgbHMgKi56aXAgfCB0YWlsIC0xYCIKICAgICAgICAgIC0gcm0gLWYgKi56aXAKCiAgbm90aWZ5OgogICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2sKICAgIHdlYmhvb2s6IGh0dHBzOi8vaG9va3Muc2xhY2suY29tL3NlcnZpY2VzL1QzVjBYUkE1Ui9CNDFUNTc2Rkova3FwOFBNaEM5OEdTRHZQdHdHeXhpYkk5CiAgICBjaGFubmVsOiB0aGUtbWFzdC1zdGF0dXMKICAgIHVzZXJuYW1lOiBkcm9uZS1jaQogICAgd2hlbjoKICAgICAgc3RhdHVzOiBbIHN1Y2Nlc3MsIGZhaWx1cmUgXQogICAgaWNvbl91cmw6IGh0dHA6Ly9wbHVnaW5zLmRyb25lLmlvL2xvZ28uc3ZnCiAgICB0ZW1wbGF0ZTogfAogICAgICB7eyByZXBvLm5hbWUgfX0gZmluaXNoZWQgYnVpbGQge3sgYnVpbGQubnVtYmVyIH19CiAgICAgICAgd2l0aCBhIHN0YXR1cyBvZiB7eyBidWlsZC5zdGF0dXMgfX0K.L-sjfurud0ifWnlDof6iBs3qCqmG-4-jFFoz2JVxZBg