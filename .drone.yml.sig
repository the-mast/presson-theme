eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgYnVpbGQ6CiAgICBpbWFnZTogdGhlbWFzdC9kb2NrZXItd3AtdGhlbWUtYnVpbGQ6bGF0ZXN0CiAgICBjb21tYW5kczoKICAgICAgLSBucG0gaW5zdGFsbCAtZyBndWxwLWNsaSBib3dlciAmJiBucG0gaW5zdGFsbCAtLXVuc2FmZS1wZXJtCiAgICAgIC0gZ2l0IGNsb25lIC0tZGVwdGg9MSBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzLUNvZGluZy1TdGFuZGFyZHMvV29yZFByZXNzLUNvZGluZy1TdGFuZGFyZHMuZ2l0IHdwY3MKICAgICAgLSBucG0gaW5zdGFsbAogICAgICAtIG5wbSBpbnN0YWxsIC1nIGd1bHAtY2xpCiAgICAgIC0gY2Qgd3BjcyAmJiBjb21wb3NlciBpbnN0YWxsCiAgICAgIC0gZ3VscCBwaHBjcwogICAgICAtIGd1bHAgcGhwY2JmCiAgICAgIC0gZ3VscCBwYWNrYWdlCiAgICAgIC0gY2QgLi4KICAgICAgLSBnaXQgY29uZmlnIHJlbW90ZS5vcmlnaW4udXJsICdodHRwczovLyR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tL3RoZS1tYXN0L3dlYnN0YXJ0ZXJraXQtc3Bpa2UuZ2l0JwogICAgICAtIGdpdCB0YWcgdjAuMC4xLSR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBnaXQgcHVzaCBvcmlnaW4gdjAuMC4xLSR7RFJPTkVfQ09NTUlUX1NIQX0KCiAgZGVwbG95OgogICAgaW1hZ2U6IGRyaWxsc3Rlci9kcm9uZS1yc3luYzpsYXRlc3QKICAgIGhvc3RzOiBbICcke1JFTU9URV9JUF9BRERSRVNTfScgXQogICAga2V5OiAke1JFTU9URV9SU0FfS0VZfQogICAgc291cmNlOiAuL3BhY2thZ2VkLyoKICAgIHRhcmdldDogL3Zhci93d3cvaHRtbC93cC1jb250ZW50L3RoZW1lcy9tYXN0LXRoZW1lCiAgICBkZWxldGU6IHRydWUKICAgIHNjcmlwdDoKICAgICAgICAgIC0gY2QgL3Zhci93d3cvaHRtbC93cC1jb250ZW50L3RoZW1lcy9tYXN0LXRoZW1lCiAgICAgICAgICAtIGZpbmQgLiAhIC1uYW1lICIqLnppcCIgLWV4ZWMgcm0gLXJmIHt9IFw7CiAgICAgICAgICAtIHVuemlwIC1vZiAiYGxzICouemlwIHwgdGFpbCAtMWAiCiAgICAgICAgICAtIHJtIC1mICouemlwCgogIG5vdGlmeToKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiAgICB3ZWJob29rOiBodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy9UM1YwWFJBNVIvQjQxVDU3NkZKL2txcDhQTWhDOThHU0R2UHR3R3l4aWJJOQogICAgY2hhbm5lbDogdGhlLW1hc3Qtc3RhdHVzCiAgICB1c2VybmFtZTogZHJvbmUtY2kKICAgIHdoZW46CiAgICAgIHN0YXR1czogWyBzdWNjZXNzLCBmYWlsdXJlIF0KICAgIGljb25fdXJsOiBodHRwOi8vcGx1Z2lucy5kcm9uZS5pby9sb2dvLnN2ZwogICAgdGVtcGxhdGU6IHwKICAgICAge3sgcmVwby5uYW1lIH19IGZpbmlzaGVkIGJ1aWxkIHt7IGJ1aWxkLm51bWJlciB9fQogICAgICAgIHdpdGggYSBzdGF0dXMgb2Yge3sgYnVpbGQuc3RhdHVzIH19Cg.W7f6UAGa3szT2DNS8dBqBjIxf-tkC0azmH2mBx4deEs